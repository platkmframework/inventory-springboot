/*******************************************************************************
Code generated by platkmframework 
*******************************************************************************/


package org.platkmframework.inventory.controller;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;
import org.springframework.data.domain.Page;

import java.util.List;

import org.platkmframework.inventory.domain.service.CategoriesService;
import org.platkmframework.inventory.domain.vo.CategoriesVO;

@RestController
@RequestMapping("/categories")
public class CategoriesController{

  @Autowired
  private CategoriesService categoriesService;

  @GetMapping("/criteria")
  public Page<CategoriesVO> criteriaCategories(@RequestParam(defaultValue = "0", name="page") int page, 
		  @RequestParam(defaultValue = "10", name="size") int size){
       return  categoriesService.criteriaCategories(page, size);
  }

  @GetMapping("/list")
  public List<CategoriesVO> listCategories(){
       return  categoriesService.listCategories();
  }

  @PostMapping
   public CategoriesVO createCategories(@RequestBody CategoriesVO  categoriesVO) {
        return  categoriesService.createCategories( categoriesVO);
    }

    @GetMapping("/{id}")
    public ResponseEntity<CategoriesVO> getCategoriesById(@PathVariable(name="id")  java.lang.Long categoryId) {
        return  categoriesService.getCategoriesById(categoryId)
                .map(ResponseEntity::ok)
                .orElse(ResponseEntity.notFound().build());
    }

    @PutMapping
    public ResponseEntity<CategoriesVO> updateCategories(@RequestBody CategoriesVO  categories) {
        return  categoriesService.updateCategories(categories)
                .map(ResponseEntity::ok)
                .orElse(ResponseEntity.notFound().build());
    }

    @DeleteMapping("/{id}")
    public ResponseEntity<Void> removeCategories(@PathVariable(name="id") java.lang.Long categoryId) {
        return categoriesService.removeCategories(categoryId) ?
                ResponseEntity.noContent().build() :
                ResponseEntity.notFound().build();
    }

}