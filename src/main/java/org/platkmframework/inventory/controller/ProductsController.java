/*******************************************************************************
Code generated by platkmframework 
*******************************************************************************/


package org.platkmframework.inventory.controller;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;
import org.springframework.data.domain.Page;

import java.util.List;

import org.platkmframework.inventory.domain.service.ProductsService;
import org.platkmframework.inventory.domain.vo.ProductsVO;

@RestController
@RequestMapping("/products")
public class ProductsController{

  @Autowired
  private ProductsService productsService;

  @GetMapping("/criteria")
  public Page<ProductsVO> criteriaProducts(@RequestParam(defaultValue = "0", name="page") int page, 
		  @RequestParam(defaultValue = "10", name="size") int size){
       return  productsService.criteriaProducts(page, size);
  }

  @GetMapping("/list")
  public List<ProductsVO> listProducts(){
       return  productsService.listProducts();
  }

  @PostMapping
   public ProductsVO createProducts(@RequestBody ProductsVO  productsVO) {
        return  productsService.createProducts( productsVO);
    }

    @GetMapping("/{id}")
    public ResponseEntity<ProductsVO> getProductsById(@PathVariable(name="id")  java.lang.Long productId) {
        return  productsService.getProductsById(productId)
                .map(ResponseEntity::ok)
                .orElse(ResponseEntity.notFound().build());
    }

    @PutMapping
    public ResponseEntity<ProductsVO> updateProducts(@RequestBody ProductsVO  products) {
        return  productsService.updateProducts(products)
                .map(ResponseEntity::ok)
                .orElse(ResponseEntity.notFound().build());
    }

    @DeleteMapping("/{id}")
    public ResponseEntity<Void> removeProducts(@PathVariable(name="id") java.lang.Long productId) {
        return productsService.removeProducts(productId) ?
                ResponseEntity.noContent().build() :
                ResponseEntity.notFound().build();
    }

}