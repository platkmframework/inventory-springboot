 /*******************************************************************************
Code generated by platkmframework 
*******************************************************************************/


package org.platkmframework.inventory.domain.service;

import org.platkmframework.inventory.domain.vo.BatchMovementsVO;
import org.platkmframework.inventory.domain.entity.BatchMovements;
import org.platkmframework.inventory.domain.dao.BatchMovementsMapper;
import org.platkmframework.inventory.domain.dao.BatchMovementsRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.util.List;
import java.util.Optional;
import java.util.stream.Collectors;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Pageable;
 
@Service
public class BatchMovementsServiceImpl implements  BatchMovementsService{

    @Autowired
    private BatchMovementsRepository batchmovementsRepository;
 
  @Override
  public List<BatchMovementsVO> listBatchMovements(){
        return batchmovementsRepository.findAll().stream()
                .map(BatchMovementsMapper::toVO)
                .collect(Collectors.toList());
 }

  @Override
  public Page<BatchMovementsVO> criteriaBatchMovements(int page, int size){
 		Pageable pageable = PageRequest.of(page, size);
		 return batchmovementsRepository.findAll(pageable)
	                .map(BatchMovementsMapper::toVO);
 }

 @Override
 public BatchMovementsVO createBatchMovements(BatchMovementsVO batchmovementsVO)  {
        BatchMovements batchmovements= BatchMovementsMapper.toEntity(batchmovementsVO);
        return BatchMovementsMapper.toVO(batchmovementsRepository.save(batchmovements));
 }

 @Override
 public Optional<BatchMovementsVO> getBatchMovementsById(java.lang.Long movementId){
        return batchmovementsRepository.findById(movementId)
                .map(BatchMovementsMapper::toVO);
 }

  @Override
  public Optional<BatchMovementsVO> updateBatchMovements( BatchMovementsVO batchmovementsVO){
       return batchmovementsRepository.findById(batchmovementsVO.getMovementId()).map(batchmovements -> {
            BatchMovementsMapper.toEntity(batchmovementsVO, batchmovements);
            return BatchMovementsMapper.toVO(batchmovementsRepository.save(batchmovements));
        });
 }

	@Override
	public boolean removeBatchMovements(java.lang.Long movementId) {
 		return batchmovementsRepository.findById(movementId).map(batchmovements -> {
            		batchmovementsRepository.delete(batchmovements);
            		return true;
        		}).orElse(false);
	}
}

