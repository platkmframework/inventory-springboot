 /*******************************************************************************
Code generated by platkmframework 
*******************************************************************************/


package org.platkmframework.inventory.domain.service;

import org.platkmframework.inventory.domain.vo.ClientsVO;
import org.platkmframework.inventory.domain.entity.Clients;
import org.platkmframework.inventory.domain.dao.ClientsMapper;
import org.platkmframework.inventory.domain.dao.ClientsRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.util.List;
import java.util.Optional;
import java.util.stream.Collectors;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Pageable;
 
@Service
public class ClientsServiceImpl implements  ClientsService{

    @Autowired
    private ClientsRepository clientsRepository;
 
  @Override
  public List<ClientsVO> listClients(){
        return clientsRepository.findAll().stream()
                .map(ClientsMapper::toVO)
                .collect(Collectors.toList());
 }

  @Override
  public Page<ClientsVO> criteriaClients(int page, int size){
 		Pageable pageable = PageRequest.of(page, size);
		 return clientsRepository.findAll(pageable)
	                .map(ClientsMapper::toVO);
 }

 @Override
 public ClientsVO createClients(ClientsVO clientsVO)  {
        Clients clients= ClientsMapper.toEntity(clientsVO);
        return ClientsMapper.toVO(clientsRepository.save(clients));
 }

 @Override
 public Optional<ClientsVO> getClientsById(java.lang.Long clientId){
        return clientsRepository.findById(clientId)
                .map(ClientsMapper::toVO);
 }

  @Override
  public Optional<ClientsVO> updateClients( ClientsVO clientsVO){
       return clientsRepository.findById(clientsVO.getClientId()).map(clients -> {
            ClientsMapper.toEntity(clientsVO, clients);
            return ClientsMapper.toVO(clientsRepository.save(clients));
        });
 }

	@Override
	public boolean removeClients(java.lang.Long clientId) {
 		return clientsRepository.findById(clientId).map(clients -> {
            		clientsRepository.delete(clients);
            		return true;
        		}).orElse(false);
	}
}

