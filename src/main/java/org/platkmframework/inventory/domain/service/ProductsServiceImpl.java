 /*******************************************************************************
Code generated by platkmframework 
*******************************************************************************/


package org.platkmframework.inventory.domain.service;

import org.platkmframework.inventory.domain.vo.ProductsVO;
import org.platkmframework.inventory.domain.entity.Products;
import org.platkmframework.inventory.domain.dao.ProductsMapper;
import org.platkmframework.inventory.domain.dao.ProductsRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.util.List;
import java.util.Optional;
import java.util.stream.Collectors;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Pageable;
 
@Service
public class ProductsServiceImpl implements  ProductsService{

    @Autowired
    private ProductsRepository productsRepository;
 
  @Override
  public List<ProductsVO> listProducts(){
        return productsRepository.findAll().stream()
                .map(ProductsMapper::toVO)
                .collect(Collectors.toList());
 }

  @Override
  public Page<ProductsVO> criteriaProducts(int page, int size){
 		Pageable pageable = PageRequest.of(page, size);
		 return productsRepository.findAll(pageable)
	                .map(ProductsMapper::toVO);
 }

 @Override
 public ProductsVO createProducts(ProductsVO productsVO)  {
        Products products= ProductsMapper.toEntity(productsVO);
        return ProductsMapper.toVO(productsRepository.save(products));
 }

 @Override
 public Optional<ProductsVO> getProductsById(java.lang.Long productId){
        return productsRepository.findById(productId)
                .map(ProductsMapper::toVO);
 }

  @Override
  public Optional<ProductsVO> updateProducts( ProductsVO productsVO){
       return productsRepository.findById(productsVO.getProductId()).map(products -> {
            ProductsMapper.toEntity(productsVO, products);
            return ProductsMapper.toVO(productsRepository.save(products));
        });
 }

	@Override
	public boolean removeProducts(java.lang.Long productId) {
 		return productsRepository.findById(productId).map(products -> {
            		productsRepository.delete(products);
            		return true;
        		}).orElse(false);
	}
}

