 /*******************************************************************************
Code generated by platkmframework 
*******************************************************************************/


package org.platkmframework.inventory.domain.service;

import org.platkmframework.inventory.domain.vo.BatchEntriesVO;
import org.platkmframework.inventory.domain.entity.BatchEntries;
import org.platkmframework.inventory.domain.dao.BatchEntriesMapper;
import org.platkmframework.inventory.domain.dao.BatchEntriesRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.util.List;
import java.util.Optional;
import java.util.stream.Collectors;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Pageable;
 
@Service
public class BatchEntriesServiceImpl implements  BatchEntriesService{

    @Autowired
    private BatchEntriesRepository batchentriesRepository;
 
  @Override
  public List<BatchEntriesVO> listBatchEntries(){
        return batchentriesRepository.findAll().stream()
                .map(BatchEntriesMapper::toVO)
                .collect(Collectors.toList());
 }

  @Override
  public Page<BatchEntriesVO> criteriaBatchEntries(int page, int size){
 		Pageable pageable = PageRequest.of(page, size);
		 return batchentriesRepository.findAll(pageable)
	                .map(BatchEntriesMapper::toVO);
 }

 @Override
 public BatchEntriesVO createBatchEntries(BatchEntriesVO batchentriesVO)  {
        BatchEntries batchentries= BatchEntriesMapper.toEntity(batchentriesVO);
        return BatchEntriesMapper.toVO(batchentriesRepository.save(batchentries));
 }

 @Override
 public Optional<BatchEntriesVO> getBatchEntriesById(java.lang.Long entryId){
        return batchentriesRepository.findById(entryId)
                .map(BatchEntriesMapper::toVO);
 }

  @Override
  public Optional<BatchEntriesVO> updateBatchEntries( BatchEntriesVO batchentriesVO){
       return batchentriesRepository.findById(batchentriesVO.getEntryId()).map(batchentries -> {
            BatchEntriesMapper.toEntity(batchentriesVO, batchentries);
            return BatchEntriesMapper.toVO(batchentriesRepository.save(batchentries));
        });
 }

	@Override
	public boolean removeBatchEntries(java.lang.Long entryId) {
 		return batchentriesRepository.findById(entryId).map(batchentries -> {
            		batchentriesRepository.delete(batchentries);
            		return true;
        		}).orElse(false);
	}
}

